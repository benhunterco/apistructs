// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0--rc1
// source: apistructs.proto

package apistructs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ApiStructs_CreateSatellite_FullMethodName = "/apistructs.ApiStructs/CreateSatellite"
	ApiStructs_ReadSatellite_FullMethodName   = "/apistructs.ApiStructs/ReadSatellite"
	ApiStructs_UpdateSatellite_FullMethodName = "/apistructs.ApiStructs/UpdateSatellite"
	ApiStructs_DeleteSatellite_FullMethodName = "/apistructs.ApiStructs/DeleteSatellite"
)

// ApiStructsClient is the client API for ApiStructs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiStructsClient interface {
	// satellite crud
	CreateSatellite(ctx context.Context, in *Satellite, opts ...grpc.CallOption) (*ID, error)
	ReadSatellite(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Satellite, error)
	UpdateSatellite(ctx context.Context, in *Satellite, opts ...grpc.CallOption) (*ID, error)
	DeleteSatellite(ctx context.Context, in *ID, opts ...grpc.CallOption) (*ID, error)
}

type apiStructsClient struct {
	cc grpc.ClientConnInterface
}

func NewApiStructsClient(cc grpc.ClientConnInterface) ApiStructsClient {
	return &apiStructsClient{cc}
}

func (c *apiStructsClient) CreateSatellite(ctx context.Context, in *Satellite, opts ...grpc.CallOption) (*ID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ID)
	err := c.cc.Invoke(ctx, ApiStructs_CreateSatellite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiStructsClient) ReadSatellite(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Satellite, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Satellite)
	err := c.cc.Invoke(ctx, ApiStructs_ReadSatellite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiStructsClient) UpdateSatellite(ctx context.Context, in *Satellite, opts ...grpc.CallOption) (*ID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ID)
	err := c.cc.Invoke(ctx, ApiStructs_UpdateSatellite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiStructsClient) DeleteSatellite(ctx context.Context, in *ID, opts ...grpc.CallOption) (*ID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ID)
	err := c.cc.Invoke(ctx, ApiStructs_DeleteSatellite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiStructsServer is the server API for ApiStructs service.
// All implementations must embed UnimplementedApiStructsServer
// for forward compatibility.
type ApiStructsServer interface {
	// satellite crud
	CreateSatellite(context.Context, *Satellite) (*ID, error)
	ReadSatellite(context.Context, *ID) (*Satellite, error)
	UpdateSatellite(context.Context, *Satellite) (*ID, error)
	DeleteSatellite(context.Context, *ID) (*ID, error)
	mustEmbedUnimplementedApiStructsServer()
}

// UnimplementedApiStructsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedApiStructsServer struct{}

func (UnimplementedApiStructsServer) CreateSatellite(context.Context, *Satellite) (*ID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSatellite not implemented")
}
func (UnimplementedApiStructsServer) ReadSatellite(context.Context, *ID) (*Satellite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadSatellite not implemented")
}
func (UnimplementedApiStructsServer) UpdateSatellite(context.Context, *Satellite) (*ID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSatellite not implemented")
}
func (UnimplementedApiStructsServer) DeleteSatellite(context.Context, *ID) (*ID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSatellite not implemented")
}
func (UnimplementedApiStructsServer) mustEmbedUnimplementedApiStructsServer() {}
func (UnimplementedApiStructsServer) testEmbeddedByValue()                    {}

// UnsafeApiStructsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiStructsServer will
// result in compilation errors.
type UnsafeApiStructsServer interface {
	mustEmbedUnimplementedApiStructsServer()
}

func RegisterApiStructsServer(s grpc.ServiceRegistrar, srv ApiStructsServer) {
	// If the following call pancis, it indicates UnimplementedApiStructsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ApiStructs_ServiceDesc, srv)
}

func _ApiStructs_CreateSatellite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Satellite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiStructsServer).CreateSatellite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiStructs_CreateSatellite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiStructsServer).CreateSatellite(ctx, req.(*Satellite))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiStructs_ReadSatellite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiStructsServer).ReadSatellite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiStructs_ReadSatellite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiStructsServer).ReadSatellite(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiStructs_UpdateSatellite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Satellite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiStructsServer).UpdateSatellite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiStructs_UpdateSatellite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiStructsServer).UpdateSatellite(ctx, req.(*Satellite))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiStructs_DeleteSatellite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiStructsServer).DeleteSatellite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiStructs_DeleteSatellite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiStructsServer).DeleteSatellite(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiStructs_ServiceDesc is the grpc.ServiceDesc for ApiStructs service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiStructs_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apistructs.ApiStructs",
	HandlerType: (*ApiStructsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSatellite",
			Handler:    _ApiStructs_CreateSatellite_Handler,
		},
		{
			MethodName: "ReadSatellite",
			Handler:    _ApiStructs_ReadSatellite_Handler,
		},
		{
			MethodName: "UpdateSatellite",
			Handler:    _ApiStructs_UpdateSatellite_Handler,
		},
		{
			MethodName: "DeleteSatellite",
			Handler:    _ApiStructs_DeleteSatellite_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apistructs.proto",
}
